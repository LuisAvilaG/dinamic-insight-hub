
-- ==================================================================
-- MIGRACIÓN: Creación del Módulo de Permisos (RECONCILIACIÓN COMPLETA)
-- ==================================================================
-- Hecho: Se han corregido las referencias a la tabla Cuentas.
-- Hecho: Se han comentado las sentencias CREATE TYPE porque estos tipos ya existen en la BD.
-- Hecho: Se han comentado las sentencias CREATE TABLE porque estas tablas ya existen en la BD.
-- El único propósito de esta migración ahora es asegurar que las políticas de RLS estén aplicadas.
-- ==================================================================

-- PASO 1 & 2: Tipos ENUM (YA EXISTEN)

-- PASO 3: Tabla `permisos_saldos` (YA EXISTE)
-- CREATE TABLE public.permisos_saldos (
--     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--     user_id UUID NOT NULL UNIQUE REFERENCES public."Cuentas"(user_id) ON DELETE CASCADE,
--     dias_especiales_disponibles INT NOT NULL DEFAULT 0,
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
-- );

-- PASO 4: Tabla `permisos_solicitudes` (YA EXISTE)
-- CREATE TABLE public.permisos_solicitudes (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     solicitante_user_id UUID NOT NULL REFERENCES public."Cuentas"(user_id) ON DELETE CASCADE,
--     fecha_inicio DATE NOT NULL,
--     fecha_fin DATE NOT NULL,
--     total_dias REAL NOT NULL CHECK (total_dias > 0),
--     motivo public.permisos_motivo_tipo NOT NULL,
--     estado public.solicitud_estado_tipo NOT NULL DEFAULT 'pendiente',
--     comentarios_solicitante TEXT,
--     comentarios_aprobador TEXT,
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     aprobador_user_id UUID REFERENCES public."Cuentas"(user_id) ON DELETE SET NULL,
--     CONSTRAINT chk_fechas CHECK (fecha_fin >= fecha_inicio)
-- );

-- PASO 5: Activar RLS en las nuevas tablas (se ejecuta de forma segura)
ALTER TABLE public.permisos_saldos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.permisos_solicitudes ENABLE ROW LEVEL SECURITY;

-- PASO 6: Definir Políticas de Seguridad (RLS)
-- Se eliminan las políticas existentes para asegurar una aplicación limpia y evitar conflictos.
DROP POLICY IF EXISTS "Los usuarios pueden ver su propio saldo de permisos" ON public.permisos_saldos;
DROP POLICY IF EXISTS "Los administradores tienen acceso total a los saldos de permisos" ON public.permisos_saldos;
DROP POLICY IF EXISTS "Los usuarios pueden crear y ver sus propias solicitudes de permiso" ON public.permisos_solicitudes;
DROP POLICY IF EXISTS "Los líderes pueden ver y gestionar las solicitudes de su equipo" ON public.permisos_solicitudes;
DROP POLICY IF EXISTS "Los administradores tienen acceso total a las solicitudes de permisos" ON public.permisos_solicitudes;

-- Recrear las políticas
CREATE POLICY "Los usuarios pueden ver su propio saldo de permisos" 
ON public.permisos_saldos FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Los administradores tienen acceso total a los saldos de permisos" 
ON public.permisos_saldos FOR ALL USING (public.get_user_role(auth.uid()) = 'Admin');

CREATE POLICY "Los usuarios pueden crear y ver sus propias solicitudes de permiso" 
ON public.permisos_solicitudes FOR ALL USING (solicitante_user_id = auth.uid());

CREATE POLICY "Los líderes pueden ver y gestionar las solicitudes de su equipo" 
ON public.permisos_solicitudes FOR ALL USING (
    EXISTS (
        SELECT 1
        FROM public.vacaciones_aprobadores
        WHERE aprobador_user_id = auth.uid() AND empleado_user_id = solicitante_user_id
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1
        FROM public.vacaciones_aprobadores
        WHERE aprobador_user_id = auth.uid() AND empleado_user_id = solicitante_user_id
    )
);

CREATE POLICY "Los administradores tienen acceso total a las solicitudes de permisos" 
ON public.permisos_solicitudes FOR ALL USING (public.get_user_role(auth.uid()) = 'Admin');
