-- 1. Create table for tracking individual report views
CREATE TABLE public.report_views (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  report_id UUID NOT NULL REFERENCES public.reportes(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  viewed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- RLS and Policies for report_views
ALTER TABLE public.report_views ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow users to insert their own views"
ON public.report_views FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow all users to read all views"
ON public.report_views FOR SELECT
TO authenticated
USING (true);


-- 2. Create table for tracking user logins
CREATE TABLE public.user_logins (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    login_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- RLS and Policies for user_logins
ALTER TABLE public.user_logins ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow users to log their own login"
ON public.user_logins FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow all users to read login data"
ON public.user_logins FOR SELECT
TO authenticated
USING (true);
