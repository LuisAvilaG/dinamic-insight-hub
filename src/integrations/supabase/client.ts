
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rytfakmpznrithljllyl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5dGZha21wem5yaXRobGpsbHlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNTI2MzYsImV4cCI6MjA2OTcyODYzNn0.fpbvpK8eIeOJayhuFDmm-KBWWDA6kekkOcM0DpwsVko";

// Custom implementation of a storage adapter that safely handles
// potential security errors when localStorage is not available.
const safeLocalStorage = {
  getItem: (key: string) => {
    try {
      return window.localStorage.getItem(key);
    } catch (error) {
      console.warn('localStorage is not available. Falling back to in-memory storage.', error);
      return null;
    }
  },
  setItem: (key: string, value: string) => {
    try {
      window.localStorage.setItem(key, value);
    } catch (error) {
      console.warn('localStorage is not available. Changes will not be persisted.', error);
    }
  },
  removeItem: (key: string) => {
    try {
      window.localStorage.removeItem(key);
    } catch (error) {
      console.warn('localStorage is not available. Could not remove item.', error);
    }
  },
};

// Initialize the Supabase client with the safe storage adapter.
// This ensures that the application does not crash if localStorage
// is blocked or unavailable (e.g., in private browsing mode).
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: safeLocalStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
});
